/*
1657. Determine if Two Strings Are Close
Two strings are considered close if you can attain one from the other using the following operations:

Operation 1: Swap any two existing characters.
For example, abcde -> aecdb
Operation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character.
For example, aacabb -> bbcbaa (all a's turn into b's, and all b's turn into a's)
You can use the operations on either string as many times as necessary.
Given two strings, word1 and word2, return true if word1 and word2 are close, and false otherwise.

Example 1:
Input: word1 = "abc", word2 = "bca"
Output: true
Explanation: You can attain word2 from word1 in 2 operations.
Apply Operation 1: "abc" -> "acb"
Apply Operation 1: "acb" -> "bca"

Example 2:
Input: word1 = "a", word2 = "aa"
Output: false
Explanation: It is impossible to attain word2 from word1, or vice versa, in any number of operations.

Example 3:
Input: word1 = "cabbba", word2 = "abbccc"
Output: true
Explanation: You can attain word2 from word1 in 3 operations.
Apply Operation 1: "cabbba" -> "caabbb"
Apply Operation 2: "caabbb" -> "baaccc"
Apply Operation 2: "baaccc" -> "abbccc"
*/

function closeStrings(word1: string, word2: string): boolean {
  if (word1.length !== word2.length) return false;
  const a = new Map();
  const b = new Map();
  for (let i = 0; i < word1.length; i++) {
      const x1 = word1[i];
      const x2 = word2[i];
      a.set(x1, a.get(x1) + 1 || 0);
      b.set(x2, b.get(x2) + 1 || 0);
  }
  let result = false;
  const a1 = Array.from(a.values()).sort().join('');
  const a2= Array.from(b.values()).sort().join('');

  const b1 = Array.from(a.keys()).sort().join('');
  const b2 = Array.from(b.keys()).sort().join('');
  result = b1===b2 && a1===a2
  return result
};


/*
üéØ M·ª•c ti√™u c·ªßa b√†i to√°n:
Ch√∫ng ta c·∫ßn ki·ªÉm tra xem t·∫ßn su·∫•t k√Ω t·ª± trong hai chu·ªói c√≥ gi·ªëng nhau kh√¥ng, kh√¥ng c·∫ßn ƒë√∫ng k√Ω t·ª±, ch·ªâ c·∫ßn s·ªë l∆∞·ª£ng gi·ªëng nhau.

üîç V√≠ d·ª•:
Gi·∫£ s·ª≠ c√≥ 2 chu·ªói:

txt
Sao ch√©p
Ch·ªânh s·ª≠a
word1 = "aabbc"    ‚Üí {'a': 2, 'b': 2, 'c': 1}
word2 = "ddeee"    ‚Üí {'d': 2, 'e': 3}
T·∫ßn su·∫•t c·ªßa word1 l√† [2, 2, 1]
T·∫ßn su·∫•t c·ªßa word2 l√† [2, 3]
‚Üí kh√°c nhau ‚áí kh√¥ng th·ªÉ "ƒë·ªïi nh√£n k√Ω t·ª±" ƒë·ªÉ th√†nh gi·ªëng nhau.

üß† Gi·ªù gi·∫£ s·ª≠ ta c√≥:
txt
Sao ch√©p
Ch·ªânh s·ª≠a
word1 = "aabbc"    ‚Üí {'a': 2, 'b': 2, 'c': 1}
word2 = "ddeff"    ‚Üí {'d': 2, 'e': 2, 'f': 1}
T·∫ßn su·∫•t:

word1: [2, 2, 1]

word2: [2, 2, 1]

=> T∆∞·ªüng gi·ªëng r·ªìi, nh∆∞ng n·∫øu kh√¥ng s·∫Øp x·∫øp, th·ª© t·ª± trong object c√≥ th·ªÉ kh√¥ng gi·ªëng nhau, d·∫´n ƒë·∫øn so s√°nh b·ªã sai.

ü§î T·∫°i sao c·∫ßn sort()?
Gi·∫£ s·ª≠ b·∫°n c√≥:

js
Sao ch√©p
Ch·ªânh s·ª≠a
// Tr∆∞·ªùng h·ª£p gi·ªëng nhau nh∆∞ng kh√°c th·ª© t·ª±
[2, 2, 1] !== [1, 2, 2]  // so s√°nh tr·ª±c ti·∫øp ‚Üí sai
Nh∆∞ng sau khi sort():

js
Sao ch√©p
Ch·ªânh s·ª≠a
sort([2, 2, 1]) ‚Üí [1, 2, 2]
sort([1, 2, 2]) ‚Üí [1, 2, 2]
‚Üí gi·ªëng nhau r·ªìi ‚úÖ
*/